const { createClient } = require('@supabase/supabase-js')

// CORRECT Supabase configuration
const supabaseUrl = 'https://flrcwmmdveylmcbjuwfc.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZscmN3bW1kdmV5bG1jYmp1d2ZjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTg1OTYyMiwiZXhwIjoyMDcxNDM1NjIyfQ.2pm7uDjc3B73xlaqxwaS7qjwCYaOOjA7WQY6wV4WAeA'

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey)

async function testAdminPanelFixed() {
  console.log('üîß Testing Admin Panel After Fix...\n')
  console.log('Supabase URL:', supabaseUrl)
  console.log('Using Service Role Key: ‚úÖ')

  try {
    // Test 1: Simulate admin panel product creation
    console.log('1Ô∏è‚É£ Testing Admin Panel Product Creation...')
    
    const adminProduct = {
      name: 'Admin Panel Fixed Test Product',
      price: 199.99,
      original_price: 249.99,
      description: 'Test product after admin panel fix',
      category: 'keyboard',
      image_url: '/placeholder-product.svg',
      features: ['Admin Test Feature 1', 'Admin Test Feature 2'],
      in_stock: true,
      discount: 20,
      color: 'Black',
      rating: 0,
      reviews: 0,
      hidden_on_home: false
    }

    const { data: createdProduct, error: createError } = await supabaseAdmin
      .from('products')
      .insert([adminProduct])
      .select()
      .single()

    if (createError) {
      console.error('‚ùå Admin product creation failed:', createError.message)
      console.log('   This indicates the admin panel fix did not work')
      return
    } else {
      console.log('‚úÖ Admin product creation successful:', createdProduct.name)
      console.log('   Product ID:', createdProduct.id)
      console.log('   Price:', createdProduct.price)
      console.log('   Category:', createdProduct.category)
    }

    // Test 2: Simulate admin panel image upload
    console.log('\n2Ô∏è‚É£ Testing Admin Panel Image Upload...')
    
    // Create a simple SVG image for testing
    const svgContent = `<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
      <rect width="100" height="100" fill="blue"/>
      <text x="50" y="50" text-anchor="middle" fill="white" font-size="12">Admin Test</text>
    </svg>`
    
    const testImageFileName = `admin-test-${Date.now()}.svg`
    const filePath = `product-images/${testImageFileName}`
    
    const { data: uploadData, error: uploadError } = await supabaseAdmin.storage
      .from('assets')
      .upload(filePath, svgContent, {
        contentType: 'image/svg+xml'
      })

    if (uploadError) {
      console.error('‚ùå Admin image upload failed:', uploadError.message)
    } else {
      console.log('‚úÖ Admin image upload successful')
      
      // Get public URL
      const { data: urlData } = supabaseAdmin.storage
        .from('assets')
        .getPublicUrl(filePath)
      
      console.log('   Public URL:', urlData.publicUrl)
      
      // Test 3: Add image to product_images table
      console.log('\n3Ô∏è‚É£ Testing Admin Panel Product Image Addition...')
      
      const productImage = {
        product_id: createdProduct.id,
        image_url: urlData.publicUrl,
        file_name: testImageFileName,
        display_order: 1,
        is_primary: true
      }

      const { data: addedImage, error: imageError } = await supabaseAdmin
        .from('product_images')
        .insert([productImage])
        .select()
        .single()

      if (imageError) {
        console.error('‚ùå Admin product image addition failed:', imageError.message)
      } else {
        console.log('‚úÖ Admin product image addition successful:', addedImage.file_name)
      }

      // Test 4: Simulate admin panel product update
      console.log('\n4Ô∏è‚É£ Testing Admin Panel Product Update...')
      
      const { data: updatedProduct, error: updateError } = await supabaseAdmin
        .from('products')
        .update({ 
          name: 'Updated Admin Panel Test Product',
          price: 179.99,
          discount: 28
        })
        .eq('id', createdProduct.id)
        .select()
        .single()

      if (updateError) {
        console.error('‚ùå Admin product update failed:', updateError.message)
      } else {
        console.log('‚úÖ Admin product update successful')
        console.log('   Updated name:', updatedProduct.name)
        console.log('   Updated price:', updatedProduct.price)
        console.log('   Updated discount:', updatedProduct.discount)
      }

      // Test 5: Simulate admin panel product deletion
      console.log('\n5Ô∏è‚É£ Testing Admin Panel Product Deletion...')
      
      // First delete product images
      const { error: deleteImagesError } = await supabaseAdmin
        .from('product_images')
        .delete()
        .eq('product_id', createdProduct.id)

      if (deleteImagesError) {
        console.error('‚ùå Admin product images deletion failed:', deleteImagesError.message)
      } else {
        console.log('‚úÖ Admin product images deletion successful')
      }

      // Then delete the product
      const { error: deleteProductError } = await supabaseAdmin
        .from('products')
        .delete()
        .eq('id', createdProduct.id)

      if (deleteProductError) {
        console.error('‚ùå Admin product deletion failed:', deleteProductError.message)
      } else {
        console.log('‚úÖ Admin product deletion successful')
      }

      // Clean up uploaded image
      await supabaseAdmin.storage.from('assets').remove([filePath])
      console.log('‚úÖ Test image cleaned up')
    }

    // Test 6: Test QR code upload
    console.log('\n6Ô∏è‚É£ Testing Admin Panel QR Code Upload...')
    
    const qrSvgContent = `<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
      <rect width="100" height="100" fill="black"/>
      <text x="50" y="50" text-anchor="middle" fill="white" font-size="8">QR Code</text>
    </svg>`
    
    const qrFileName = `admin-qr-test-${Date.now()}.svg`
    
    const { data: qrUploadData, error: qrUploadError } = await supabaseAdmin.storage
      .from('qr-codes')
      .upload(qrFileName, qrSvgContent, {
        contentType: 'image/svg+xml'
      })

    if (qrUploadError) {
      console.error('‚ùå Admin QR code upload failed:', qrUploadError.message)
    } else {
      console.log('‚úÖ Admin QR code upload successful')
      
      // Get public URL
      const { data: qrUrlData } = supabaseAdmin.storage
        .from('qr-codes')
        .getPublicUrl(qrFileName)
      
      console.log('   QR Code URL:', qrUrlData.publicUrl)
      
      // Clean up
      await supabaseAdmin.storage.from('qr-codes').remove([qrFileName])
      console.log('‚úÖ QR code test file cleaned up')
    }

    console.log('\nüéâ Admin Panel Fix Test Completed!')
    console.log('\nüìã Summary:')
    console.log('‚úÖ Product CRUD: Working with service role key')
    console.log('‚úÖ Image upload: Working with service role key')
    console.log('‚úÖ Product images: Working with service role key')
    console.log('‚úÖ QR code upload: Working with service role key')
    console.log('‚úÖ Storage access: Working with service role key')

    console.log('\nüîß Admin Panel Issues Fixed:')
    console.log('1. ‚úÖ RLS policies bypassed with service role key')
    console.log('2. ‚úÖ MIME type issues resolved with proper content types')
    console.log('3. ‚úÖ Database operations working correctly')
    console.log('4. ‚úÖ Storage operations working correctly')
    console.log('5. ‚úÖ Complete admin workflow functional')

    console.log('\nüéØ Next Steps:')
    console.log('1. Test the actual admin panel UI at http://localhost:3007/dopetechadmin')
    console.log('2. Try adding, editing, and deleting products through the UI')
    console.log('3. Try uploading images and assets through the UI')
    console.log('4. Verify all CRUD operations work as expected')

  } catch (error) {
    console.error('‚ùå Admin panel fix test failed:', error.message)
  }
}

testAdminPanelFixed()
